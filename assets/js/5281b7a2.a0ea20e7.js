"use strict";(self.webpackChunkthea_gs=self.webpackChunkthea_gs||[]).push([[5927],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>h});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=l(r),h=o,m=d["".concat(c,".").concat(h)]||d[h]||p[h]||i;return r?n.createElement(m,a(a({ref:t},u),{},{components:r})):n.createElement(m,a({ref:t},u))}));function h(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var l=2;l<i;l++)a[l]=r[l];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},1527:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var n=r(7462),o=(r(7294),r(3905));const i={sidebar_position:1},a="Architecture",s={unversionedId:"architecture",id:"architecture",title:"Architecture",description:"The tool is composed of two key components: THEA Mobile Application and THEA Server. The THEA mobile application is installed on the subject/driver\u2019s mobile phone. During installation the driver is assigned a unique id. The mobile application tracks the driver\u2019s movement by collecting timestamped GPS coordinates as has he/she moves. The collected location information is sent to the THEA Server.",source:"@site/docs/architecture.md",sourceDirName:".",slug:"/architecture",permalink:"/docs/architecture",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/architecture.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Installation",permalink:"/docs/installation"},next:{title:"Dashboard",permalink:"/docs/dashboard"}},c={},l=[],u={toc:l};function p(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"architecture"},"Architecture"),(0,o.kt)("p",null,"The tool is composed of two key components: THEA Mobile Application and THEA Server. The THEA mobile application is installed on the subject/driver\u2019s mobile phone. During installation the driver is assigned a unique id. The mobile application tracks the driver\u2019s movement by collecting timestamped GPS coordinates as has he/she moves. The collected location information is sent to the THEA Server."),(0,o.kt)("p",null,"The THEA Server is composed of four subcomponents: the API Service, data persistence service, Hotspot detection engine, prediction and validation engine, and a routing engine."),(0,o.kt)("p",null,"The API service enables communication between the THEA Server and the mobile application. It also enables external systems such as laboratory management systems to send test results and received data back. All communication with the THEA Server and API Service are through encrypted connections."),(0,o.kt)("p",null,"The THEA Server receives the location information form the drivers through the API service. It stores driver test results which can be added manually or automatically collected from an external test result system via the API service."),(0,o.kt)("p",null,"The GPS location data is confined to the road network by using the routing engine. The routing engine takes each GPS location and translates it into a point on the nearest road segment."),(0,o.kt)("p",null,"The THEA Server takes the GPS locations and test results and identifies infection hotspots\nusing the Hotspot detection engine. The service runs a clustering algorithm that considers the time, distance and location of the driver to identify potential hotspots."))}p.isMDXComponent=!0}}]);